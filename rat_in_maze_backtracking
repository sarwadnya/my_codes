set<string>vec;
    void finder(vector<vector<int>>m,int r,int c,string str)
    {
        if(r==m.size()-1 && c==m[0].size()-1)
        {
            vec.insert(str);
            return;
        }
        if(r+1<m.size() && m[r+1][c]==1)
        {
            if((str.length()==0)||(str.length()>0 && str[str.length()-1]!='U'))
            {
                m[r+1][c]=-1;
                finder(m,r+1,c,str+'D');
                m[r+1][c]=1;
            }
        }
        if(c+1<m[0].size() && m[r][c+1]==1)
        {
            if((str.length()==0)||(str.length()>0 && str[str.length()-1]!='L'))
            {
                m[r][c+1]=-1;
                finder(m,r,c+1,str+'R');
                m[r][c+1]=1;
            }
        }
        if(r>0 && m[r-1][c]==1)
        {
            if((str.length()==0)||(str.length()>0 && str[str.length()-1]!='D'))
            {
                m[r-1][c]=-1;
                finder(m,r-1,c,str+'U');
                m[r-1][c]=1;
            }
        }
        if(c>0 && m[r][c-1]==1)
        {
            if((str.length()==0)||(str.length()>0 && str[str.length()-1]!='R'))
            {
                m[r][c-1]=-1;
                finder(m,r,c-1,str+'L');
                m[r][c-1]=1;
            }
        }
    }
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
        vec.clear();
        vector<string>v;
        if(m[0][0]==0)
            return v;
        finder(m,0,0,"");
        for(auto i:vec)
        {
            v.push_back(i);
        }
        return v;
    }
